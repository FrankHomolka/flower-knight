<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
randomize();

/* Change for different size */
cellWidth = 384;
cellHeight = 256;
numRoomsHor = room_width / cellWidth;//4;
numRoomsVert = room_height / cellHeight//6;

/* Initialize vars */
numRooms = 0;
mapGrid= ds_grid_create(numRoomsHor, numRoomsVert);
centerCellX = floor(numRoomsHor / 2);
centerCellY = floor(numRoomsVert / 2);
numDoors = 0;

/* Placing boss room */
bossRoomSpawned = false;
maxDistance = 0;
xDistance = 0;
yDistance = 0;
bossCellX = 0;
bossCellY = 0;

/* Placing shop room */
shopRoomSpawned = false;
shopCellX = 0;
shopCellY = 0;

/* Secret room */
secretRoomSpawned = false;
secretCellX = 0;
secretCellY = 0;

/* Set center cell */
ds_grid_set(mapGrid, centerCellX, centerCellY, "spawn");
currentCellX = centerCellX; 
currentCellY = centerCellY;

//show_debug_message("SPAWNING ROOM");

/* Set cell value for other rooms */
while(numRooms &lt; maxNumRooms) {
    nextRoom = floor(random(4));
    switch(nextRoom) { 
        case 0:
            if(currentCellY - 1 &gt; 0) {
                scr_check_room_exists(0, -1);
            } else {
                currentCellX = centerCellX;
                centerCellY = centerCellY;
            }
            break;
        case 1:
            if(currentCellX + 1 &lt; ds_grid_width(mapGrid)) {
                scr_check_room_exists(1, 0);
            } else {
                currentCellX = centerCellX;
                currentCellY = centerCellY;
            }
            break;
        case 2:
            if(currentCellY + 1 &lt; ds_grid_height(mapGrid)) {
                scr_check_room_exists(0, 1);
            } else {
                currentCellX = centerCellX;
                currentCellY = centerCellY;
            }
            break;
        case 3:
            if(currentCellX - 1 &gt; 0) {
                scr_check_room_exists(-1, 0);
            } else {
                currentCellX = centerCellX;
                currentCellY = centerCellY;
            }
            break;
    }
}


/* Generate Rooms */
surface = surface_create(room_width, room_height);

for(xx = 0; xx &lt; ds_grid_width(mapGrid); xx++) {
    for(yy = 0; yy &lt; ds_grid_height(mapGrid); yy++) {
        if(ds_grid_get(mapGrid, xx, yy) != 0) {
        
            // Get room rarity
            roomSprite = roomList[| floor(random(ds_list_size(roomList)))];
            
            // Get specific room within rarity category
            roomSubimg = random(sprite_get_number(roomSprite));
            
            startX = xx * cellWidth;
            startY = yy * cellHeight;
            
            /* Get adjacent of doors */
            scr_get_adjacent_doors();
            
            /* Generate Room */
            if(xx == centerCellX &amp;&amp; yy == centerCellY) {
                // Start Room
                scr_generate_room(startX, startY, spr_room_start_map, 0);
            } else if(xx == bossCellX &amp;&amp; yy == bossCellY) {
                // Boss Room
                ds_grid_set(mapGrid, bossCellX, bossCellY, "boss");
                scr_generate_room(startX, startY, spr_room_boss_map, 0);
                show_debug_message('bossCellX = ' + string(bossCellX) + ' bossCellY = ' + string(bossCellY));
                show_debug_message('boss room');
            } else if(xx == shopCellX &amp;&amp; yy == shopCellY){
                // Shop Room
                scr_generate_room(startX, startY, spr_room_shop_map, 0);
            } else if(numDoors == 1 &amp;&amp; !secretRoomSpawned){
                // Bomb room
                show_debug_message('startX = ' + string(startX) + ' startY = ' + string(startY));
                show_debug_message('bomb room');
                ds_grid_set(mapGrid, startX / cellWidth, startY / cellHeight, "bomb");
                scr_generate_room(startX, startY, spr_bomb_room, 0);
                secretRoomSpawned = true;
            } else {
                // Generate normal room
                scr_generate_room(startX, startY, roomSprite, roomSubimg);
            }
        }
    }
}
global.foundRoomsGrid = ds_grid_create(numRoomsHor, numRoomsVert);
scr_initialize_grid();
mp_grid_add_instances(global.grid, obj_wall, false);
mp_grid_add_instances(global.grid, obj_pit, false);
obj_gui_controller.loading = false;
obj_gui_controller.drawingLoadingScreen = false;
ds_list_destroy(enemyList);
ds_list_destroy(roomList);
surface_free(surface);
instance_create(x,y,obj_tile_depth_controller);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
