<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_charger_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_melee_enemy_parent</parentName>
  <maskName>spr_charger_idle</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

/* Mob values */
chaseDistance = 200;
moveSpeed = 0.2;
hp = 600;
customWalk = true;
attackDamage = 40;

/* Shake values */
shake = false;
shakeForce = 2;
shakeDurMax = 5;
shakeDur = shakeDurMax;

/* Animation and Sprites */
sprite = spr_charger_idle;
idleSprite = spr_charger_idle;
walkSprite = spr_charger_attack;
walkUpSprite = spr_charger_attack;
attackSprite = spr_charger_attack;
deathSprite = spr_charger_idle;
hitSprite = spr_charger_idle;
walkAnimationSpeed = 0.1;
deathSpriteLength = sprite_get_number(deathSprite) - 0.5;

/* Sounds */
walkSound = snd_slime;
deathSound = snd_enemy_death;
attackSound = snd_slime_attack;
hurtSound = snd_enemy_hit;

/* Attack Values */
attackCooldownMax = 80;
attackCooldownCounter = attackCooldownMax;
attackDistance = 0;
attackTime = 30;
attackCounter = attackTime;
attackFrame = 0;
attackPointX = 0;
attackPointY = 0;
chosenTarget = false;

/* Knockback */
baseKnockback = 0.5;
knockbackCounter = baseKnockback;

/* Death */
deathTime = 20;
deathCounter = deathTime;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(shake)
    scr_shake_screen(shakeForce,shakeDur);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

attackCooldownCounter--;
if(attackCooldownCounter &lt; 0) {
    if((state == states.walk || state == states.hit) &amp;&amp; !(collision_line(x,y + 12,obj_player.x,obj_player.y,obj_wall,false,false))) {
        if(!chosenTarget) {
            image_angle = point_direction(x,y,obj_player.x,obj_player.y);
            chosenTarget = true;
            /* Find player position */
            xdiff = abs(obj_player.x - x);
            ydiff = abs(obj_player.y - y);
            
            if(xdiff &gt; ydiff &amp;&amp; xdiff &gt; 0) {
                bigger = xdiff;
            } else if(ydiff &gt; xdiff &amp;&amp; ydiff &gt; 0) {
                bigger = ydiff;
            } else if(xdiff == ydiff &amp;&amp; xdiff &gt; 0) {
                bigger = xdiff;
            } else {
                bigger =  1;
            }
            
            xmove = xdiff / bigger;
            ymove = ydiff / bigger;
            if(x &gt; obj_player.x) {
                xmove *= -1;
            }
            if(y &gt; obj_player.y) {
                ymove *= -1;
            }
        }
        /* Move towards player */
        image_index+=0.1;
        x += xmove * 1.3;
        y += ymove * 1.3;
        if(place_meeting(x + xmove, y + ymove, obj_wall)) {
            image_angle = 0;
            shake = true;
            attackCooldownCounter = attackCooldownMax;
            chosenTarget = false;
            state = states.idle;
        }
        if(place_meeting(x,y,obj_player)) {
            scr_try_hit_player(attackDamage, id);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!pit) {
    scr_draw_entity_shadow(8, 4, 0, 0);
}
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
