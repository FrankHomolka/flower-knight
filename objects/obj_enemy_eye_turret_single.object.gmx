<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_necromancer_channel</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_enemy_parent</parentName>
  <maskName>spr_necromancer_walk</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

dodging = false;

/* Mob values */
chaseDistance = 100;
moveSpeed = 1.1;
maxHp = 20;
hp = maxHp;
attackDamage = 20;
customWalk = true;
attackObject = obj_magic_ball_single;
goldDropOnDeath = 12;

/* Animation and Sprites */
sprite = spr_necromancer_walk;
idleSprite = spr_necromancer_walk;
walkSprite = spr_necromancer_walk;
walkUpSprite = spr_necromancer_walk;
attackSprite = spr_necromancer_channel;
attackUpSprite = spr_necromancer_channel;
deathSprite = spr_necromancer_death;
hitSprite = spr_necromancer_hit;
walkAnimationSpeed = 0.1;
deathSpriteLength = sprite_get_number(deathSprite) - 0.5;

/* Sounds */
walkSound = snd_step;
deathSound = snd_eyeball_die;
attackSound = snd_eyeball_attack;
hurtSound = snd_enemy_hit;

/* Attack Values */
attackCooldownMax = 140;
attackDistance = 80;
attackTime = 70;
attackCounter = attackTime;
attackFrame = 5;

/* Knockback */
baseKnockback = 0;
knockbackCounter = baseKnockback;

/* Death */
deathTime = 20;
deathCounter = deathTime;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

/* DOdge */
if(distance_to_object(obj_player) &lt; 20 &amp;&amp; state != states.death &amp;&amp; state != states.hit &amp;&amp; state != states.attack) {
    state = states.walk;
    if(!dodging) {
        dodging = true;
        path_end();
        tempDir = point_direction(x,y,obj_player.x,obj_player.y);
        targetX = x - lengthdir_x(70, tempDir);
        targetY = y - lengthdir_y(70, tempDir);
        show_debug_message('chose dodge target');
    }
}
if(state != states.death) sprite_index = spr_necromancer_walk;

switch(state) {
    case states.idle:
        scr_enemy_idle();
        break;
    case states.walk:
        if(dodging) {
            // Start path
            if(distance_to_point(targetX, targetY) &gt; minDistance) {
                if(mp_grid_path(global.grid, path, x, y, targetX, targetY, 1)) {
                    path_start(path, moveSpeed * 1.5, path_action_stop, false);
                }
            } else {
                dodging = false;
                path_end();
            }
            if(mp_grid_get_cell(global.grid, targetX / 16, targetY / 16) == -1 
               || collision_line(x,y,targetX, targetY, obj_wall, false, false)) {
                //dodging = false;
                show_debug_message('ended path');
                path_end();
                tempDir = point_direction(x,y,obj_player.x,obj_player.y);
                targetX = x + lengthdir_x(70, tempDir);
                targetY = y + lengthdir_y(70, tempDir);
            }
        } else { 
            scr_basic_enemy_walk();
        }
        break;
    case states.attack:
        scr_enemy_ranged_attack();
        break;
    case states.hit:
        scr_enemy_hit();
        if(attacking) {
            attacking = false;
            canAttack = false;
            attackCounter = attackTime;
            state = states.idle;
        }
        break;
    case states.death:
        if(!dead) obj_quest_controller.eyeturretKills++;
        scr_enemy_death();
        break;
    default:
        break;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_enemy_general_parent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!pit) {
    scr_draw_entity_shadow(13, 4, 0, 0);
}
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
