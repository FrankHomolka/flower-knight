<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_summoner</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_enemy_parent</parentName>
  <maskName>spr_priest_teleport</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

buffTarget = noone;
canTeleport = false;
/* Mob values */
chaseDistance = 200;
moveSpeed = 0;
initalMoveSpeed = moveSpeed;
maxHp = 45;
hp = maxHp;
attackDamage = 10;
initalAttackDamage = attackDamage;
customWalk = false;
attackObject = obj_enemy_archer_attack;
goldDropOnDeath = 20;

/* Animation and Sprites */
sprite = spr_summoner;
idleSprite = spr_summoner;
walkSprite = spr_summoner;
walkUpSprite = spr_summoner;
attackSprite = spr_summoner;
attackUpSprite = spr_summoner;
deathSprite = spr_summoner;
hitSprite = spr_summoner;
walkAnimationSpeed = 0.1;
deathSpriteLength = sprite_get_number(deathSprite) - 0.5;

/* Sounds */
walkSound = snd_step;
deathSound = snd_enemy_death;
attackSound = snd_arrow_shot;
hurtSound = snd_enemy_hit;

/* Attack Values */
attackCooldownMax = 50;
attackDistance = 250;
attackTime = 500;
initalAttackTime = attackTime * 2;
attackCounter = attackTime;
attackFrame = 3;

/* Knockback */
baseKnockback = 3;
knockbackCounter = baseKnockback;

/* Death */
deathTime = 20;
deathCounter = deathTime;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

/* Execute State */
switch(state) {
    case states.idle:
        scr_enemy_idle();
        break;
    case states.walk:
        if(canTeleport) {
            sprite_index = walkSprite;
            image_speed = walkAnimationSpeed;
            if(floor(image_index) == 5) {
                canTeleport = false;
                foundSpot = false;
                while(foundSpot == false &amp;&amp; teleportAttempts &gt; 0) {
                    randDirX = random(1);
                    randDirY = random(1);
                    if(randDirX &gt; 0.5) {
                        randX = random_range(-100,-50);
                    } else {
                        randX = random_range(50,100);
                    }
                    if(randDirY &gt; 0.5) {
                        randY = random_range(-100,-50);
                    } else {
                        randY = random_range(50,100);
                    }
                    teleportAttempts--;
                    if(!collision_line(x,y,x + randX,x + randY,obj_wall,false,false)) {
                        x = x + randX;
                        y = y + randY;
                        foundSpot = true;
                        sprite_index = spr_priest
                    }
                }
            }  
        }
         
        break;
    case states.attack:
        sprite_index = attackSprite;
        image_speed = 0.1;
        
        /* happens once */
        if(attackCounter == attackTime) {
            show_debug_message('can teleport');
            canTeleport = true;
            foundSpot = false;
            teleportAttempts = 200;
            attackCooldownCounter = attackCooldownMax;
            for(var i = 0; i &lt; 3; i++)
                instance_create(x + random_range(-50,50),y + random_range(-50,50),obj_skeleton_summoner);
        }
        
        attackCounter--;
        
        /* state end */
        if(attackCounter &lt; 0) {
            if(instance_exists(buffTarget)) buffTarget.buffed = false;
            attacking = false;
            canAttack = false;
            attackCounter = attackTime;
            state = states.idle;
        }
        break;
    case states.hit:
        scr_enemy_hit();
        if(attacking)
            scr_sniper_attack();
        break;
    case states.death:
        scr_enemy_death();
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!pit) {
    scr_draw_entity_shadow(13, 4, 0, -2);
}
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
