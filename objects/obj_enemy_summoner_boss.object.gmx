<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_summoner</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_boss_parent</parentName>
  <maskName>spr_summoner</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

/* Initialization */
scr_enemy_hit_particle();
state = states.idle;
dead = false;
canAttack = true;
destroyOnDeath = false;
nextAttack = 1;

buffTarget = noone;
canTeleport = false;
/* Mob values */
chaseDistance = 200;
moveSpeed = 1;
initalMoveSpeed = moveSpeed;
maxHp = 600;
hp = maxHp;
attackDamage = 10;
initalAttackDamage = attackDamage;
customWalk = false;
attackObject = obj_enemy_archer_attack;
goldDropOnDeath = 20;
dodging = false;
destroyOnDeath = false;
minDistance = 50;

/* Animation and Sprites */
sprite = spr_summoner;
idleSprite = spr_summoner;
walkSprite = spr_summoner_walk;
walkUpSprite = spr_summoner_walk;
attackSprite = spr_summoner_attack;
attackUpSprite = spr_summoner_attack;
deathSprite = spr_summoner_death;
hitSprite = spr_summoner;
walkAnimationSpeed = 0.1;
deathSpriteLength = sprite_get_number(deathSprite) - 0.5;

/* Sounds */
walkSound = snd_step;
deathSound = snd_enemy_death;
attackSound = snd_arrow_shot;
hurtSound = snd_enemy_hit;

/* Attack Values */
attackCooldownMax = 240;
attackCooldownCounter = 0;
attackDistance = 250;
attackTime = 180;
initalAttackTime = attackTime * 2;
attackCounter = attackTime;
attackFrame = 3;

/* Knockback */
baseKnockback = 1;
knockbackCounter = baseKnockback;

/* Death */
deathTime = 50;
deathCounter = deathTime;
color = c_white;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if(foundPlayer) {

    state = states.walk;

    scr_set_enemy_state();
    
    /* Dodge */
    if(state != states.death &amp;&amp; state != states.hit &amp;&amp; state != states.attack) {
        state = states.walk;
        if(!dodging) {
            dodging = true;
            path_end();
            tempDir = point_direction(x,y,obj_player.x,obj_player.y);
            targetX = x - lengthdir_x(70, tempDir);
            targetY = y - lengthdir_y(70, tempDir);
            show_debug_message('chose dodge target');
        }
    }
    
    /* Execute state */
    switch(state) {
        case states.idle:
            scr_enemy_idle();
            break;
        case states.walk:
            sprite_index = spr_summoner_walk;
            if(dodging) {
                // Start path
                if(distance_to_point(targetX, targetY) &gt; minDistance) {
                    if(mp_grid_path(global.grid, path, x, y, targetX, targetY, 1)) {
                        path_start(path, moveSpeed * 1.5, path_action_stop, false);
                    }
                } else {
                    dodging = false;
                    path_end();
                }
                if(mp_grid_get_cell(global.grid, targetX / 16, targetY / 16) == -1 
                   || collision_line(x,y,targetX, targetY, obj_wall, false, false)) {
                    //dodging = false;
                    show_debug_message('ended path');
                    path_end();
                    tempDir = point_direction(x,y,obj_player.x,obj_player.y);
                    targetX = x + lengthdir_x(70, tempDir);
                    targetY = y + lengthdir_y(70, tempDir);
                }
            } else { 
                scr_basic_enemy_walk();
            }
             
            break;
        case states.attack:
            scr_summoner_boss_attack();
            break;
        case states.hit:
            scr_enemy_hit();
            if(attacking)
                scr_summoner_boss_attack();
            break;
        case states.death:
            inFight = false;
            if(!instance_exists(obj_next_room)) {
                if(instance_exists(obj_quest_controller)) obj_quest_controller.beatMiniboss3 = true;
                instance_create(x,y-15,obj_summoner_boss_head);
                instance_create(spawnX, spawnY, obj_next_room);
            }
            scr_enemy_death();
            break;
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!pit) {
    scr_draw_entity_shadow(8, 5, 0, 0);
}

if(state != states.death) {
    if(dodging) {
        if(targetX &gt; x) {
            xScale = -2;
            yScale = 2;
        } else {
            xScale = 2;
            yScale = 2;
        }
    } else if(obj_player.x &gt; x) {
        xScale = -2;
        yScale = 2;
    } else {
        xScale = 2;
        yScale = 2;
    }
}

draw_sprite_ext(sprite_index,image_index,x,y,xScale,yScale,0,color,1);

if((state == states.hit || state == states.death)){
    scr_flash_white(self, xScale, yScale, previousState);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
