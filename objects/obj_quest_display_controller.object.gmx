<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>numQuests = 3;
counter = 0;
i = 0;
initial_gw = 1600;
initial_gh = 900;
showQuests = true;
mouseInside = false;
unlockedItem = false;
unlockedItemMap = '';
unlockedItemCounter = 450;
unlockedItemQueue = ds_queue_create();
questProgress[3] = '';
objectiveTextColor = make_colour_hsv(170, 184, 94);
startedTransition = false;
rerolling = false;
obj_quest_controller.counter = 0;
animX = 0;
animY = 0;
animating = false;
animating2 = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_queue_destroy(unlockedItemQueue);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Toggle showing quests
if(instance_exists(obj_player)) {
    if(obj_player.quests &amp;&amp; room != rm_shop) {
        showQuests = !showQuests;
    }
}

if(showQuests)
    counter+=0.025;
    
// If player presses enter, accept quests and close
if(showQuests &amp;&amp; room == rm_shop &amp;&amp; keyboard_check_pressed(vk_enter)) {
    showQuests = false;
    audio_play_sound(snd_button_click, 10, false);
    obj_quest_giver.interacting = false;
}

// Let player re-roll quests
if(room == rm_shop &amp;&amp; keyboard_check_pressed(ord('R')) &amp;&amp; !animating) {
    if(obj_quest_giver.interacting) {
        animating = true;
        audio_play_sound(snd_dice_roll, 10, false);
    }
}

if(animating) {
    if(!animating2) {
        if(animY &gt; 2000) {
            animX = -2000;
            animY = 0;
            animating2 = true;
            if(ds_list_size(obj_quest_controller.questList) &gt; 0) {
                ds_list_clear(obj_quest_controller.questList);
                // Set vars to 0
                scr_reset_quest_vars();
                instance_create(x,y,obj_quest_generator_controller);
            }
        } else {
            animY += 40;
        }
    } else {
        if(animY == 0) {
            if(animX &lt; 0) {
                animX += 50;
            } else {
                show_debug_message('made');
                animating = false;
                animating2 = false;
            }
        }
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = -2000;
gw = display_get_gui_width();
gh = display_get_gui_height();
horBlock = gw / 32;
vertBlock = gh / 32;
scaleFactor = (gw / initial_gw);
if(showQuests) {
    // Set draw vars and draw grayed out background
    draw_set_font(fnt_ui);
    draw_set_alpha(0.4);
    draw_set_color(c_black);
    draw_rectangle(0, 0, gw, gh, false);
    draw_set_alpha(1);
    draw_set_valign(fa_top);
    draw_set_color(c_white);
    draw_set_halign(fa_left);
    
    // Draw the quests
    for(r = 0; r &lt; ds_list_size(obj_quest_controller.questList); r++) {
        item = obj_quest_controller.questList[| r];
        if(room == rm_shop) {
            horBaseline = animX + (gw / 2) - (horBlock * 2.5);
        } else {
            horBaseline = animX + (gw / 2);
        }
        vertBaseline = animY + ((gh / 3.5) * (r + 1)) - (vertBlock * 3.5);
        // Draw quest card
        draw_sprite_ext(spr_quest_card, 0, horBaseline, vertBaseline, 3 * scaleFactor, 3 * scaleFactor, 0, c_white, 1);
        // Draw quest text
        scr_draw_font_outline(item[? 'questText'], horBaseline - (2.3 * horBlock), vertBaseline, 0.5 * scaleFactor, fa_top, 60, 600, fa_left);
        scr_draw_font_outline(questProgress[r], horBaseline - (1.1 * horBlock), vertBaseline - (vertBlock * 2.4), 0.35 * scaleFactor, fa_top, 60, 800, fa_left);
        // Draw quest sprite
        draw_sprite_ext(item[? 'sprite'], 0, horBaseline - (3.6 * horBlock), vertBaseline + (vertBlock * 2), 4 * scaleFactor, 4 * scaleFactor, 0, c_white, 1);
    }
    
    
    if(room == rm_shop) {
        // Draw accept quests text
        draw_set_halign(fa_left);
        draw_set_alpha(1);
        draw_sprite_ext(spr_focus_unlocked, 0, (gw / 2) + (horBlock * 3), (gh / 2) - (11 * vertBlock), 7 * scaleFactor, 7 * scaleFactor, 0, c_white, 1)
        scr_draw_font_outline("'Enter' to Accept Quests", (gw / 2) + (horBlock * 4), (gh / 2) - (12 * vertBlock), 0.7 * scaleFactor, fa_middle, 60, 800, fa_left);
        /*draw_set_color(objectiveTextColor);
        draw_text_transformed((gw / 2) + (horBlock * 4), (gh / 2) - (12 * vertBlock), "'Enter' to Accept Quests", 2 * (1 + abs(sin(counter) / 7)) * scaleFactor, 2 * (1 + abs(sin(counter) / 7)) * scaleFactor, 0);
        draw_set_color(c_white);
        draw_text_transformed((gw / 2) + (horBlock * 4), (gh / 2) - (12 * vertBlock), "'Enter' to Accept Quests", 2 * (1 + abs(sin(counter) / 7)) * scaleFactor, 2 * (1 + abs(sin(counter) / 7)) * scaleFactor, 0);
        */
        // Draw re-roll quests text
        draw_sprite_ext(spr_dice, 0, (gw / 2) + (horBlock * 3), (gh / 2) - (9 * vertBlock), 3 * scaleFactor, 3 * scaleFactor, 0, c_white, 1)
        
        scr_draw_font_outline("'R' to re-roll quests", (gw / 2) + (horBlock * 4), (gh / 2) - (10 * vertBlock), 0.7 * scaleFactor, fa_middle, 60, 800, fa_left);
    }  
}


// Text shown when you unlock an item
if(ds_queue_size(unlockedItemQueue) &gt; 0 &amp;&amp; !unlockedItem) {
    unlockedItem = true;
    unlockedItemMap = ds_queue_dequeue(unlockedItemQueue);
    unlockedItemCounter = 450;
    audio_play_sound(snd_unlocked_item, 10, false);
}
if(unlockedItem &amp;&amp; unlockedItemCounter &gt; 0) {
    draw_set_halign(fa_center);
    draw_set_valign(fa_top);
    draw_set_alpha(1);
    draw_set_color(c_yellow);
    draw_text_transformed(gw / 2, gh / 2 + (4 * vertBlock), 'QUEST COMPLETE ' + string(unlockedItemMap[? 'name']) + '!', 5 * scaleFactor, 5 * scaleFactor, 0);
    draw_set_color(c_white);
    draw_text_transformed(gw / 2, gh / 2 + (8 * vertBlock), string(unlockedItemMap[? 'questText']) + '!', 4 * scaleFactor, 4 * scaleFactor, 0);
    draw_sprite_ext(unlockedItemMap[? 'sprite'], 0, gw / 2, gh / 2 + (12 * vertBlock), 6 * scaleFactor, 6 * scaleFactor, 0, c_white, 1);
    unlockedItemCounter--;
} else {
    unlockedItem = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
