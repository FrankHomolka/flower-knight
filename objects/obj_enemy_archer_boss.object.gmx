<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_archer_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_boss_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

/* Initialization */
scr_enemy_hit_particle();
state = states.idle;
dead = false;
canAttack = true;

/* Mob values */
moveSpeed = 0.3;
attackPause = false;
hp = 100;
maxHp = hp;
currentHp = hp;
attackDamage = 20;
customWalk = false;
destroyOnDeath = false;
attackObject = obj_archer_miniboss_attack;
minDistance = 10;
goldDropOnDeath = 200;

/* Animation and Sprites */
sprite = spr_archer_idle;
idleSprite = spr_archer_idle;
walkSprite = spr_archer_walk;
walkUpSprite = spr_archer_walk;
attackSprite = spr_archer_attack;
deathSprite = spr_archer_death;
hitSprite = spr_archer_hit;
walkAnimationSpeed = 0.1;
deathSpriteLength = sprite_get_number(deathSprite) - 0.5;

/* Sounds */
walkSound = snd_step;
deathSound = snd_enemy_death;
attackSound = snd_arrow_shot;
hurtSound = snd_enemy_hit;

/* Attack Values */
attackCooldownMax = 10;
attackCooldownCounter = 0;
attackDistance = 150;
attackTime = 5;
attackCounter = attackTime;
attackFrame = 2;
burstCounter = 0;
burstNumber = 3;

/* Knockback */
baseKnockback = 4;
knockbackCounter = baseKnockback;

/* Death */
deathTime = 20;
deathCounter = deathTime;
color = make_colour_hsv(165,95,163);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

/* Execute State */
if(foundPlayer) {

    scr_set_enemy_state();
    
    switch(state) {
        case states.idle:
            scr_enemy_idle();
            break;
        case states.walk:
            scr_enemy_walk();
            break;
        case states.attack:
            scr_miniboss_1_attack();
            break;
        case states.hit:
            scr_enemy_hit();
            break;
        case states.death:
            inFight = false;
            if(!instance_exists(obj_next_room)) {
                instance_create(x,y-15,obj_archer_miniboss_head);
                instance_create(spawnX, spawnY, obj_next_room);
            }
            scr_enemy_death();
            break;
        default:
            break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!pit) {
    scr_draw_entity_shadow(8, 5, 0, 0);
}

if(state != states.death) {
    if(obj_player.x &gt; x) {
        xScale = -2;
        yScale = 2;
    } else {
        xScale = 2;
        yScale = 2;
    }
}

draw_sprite_ext(sprite_index,image_index,x,y,xScale,yScale,0,color,1);

if((state == states.hit || state == states.death)){
    scr_flash_white(self, xScale, yScale, previousState);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
