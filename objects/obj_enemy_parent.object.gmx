<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_enemy_general_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

/* Initialization */
state = states.idle;
canAttack = true;
destroyOnDeath = true;
minDistance = 3;
buffed = false;
executedBuff = false;
playerAggro = false;
aggroCounter = 0;
/****************** DEFAULT VALUES ********************/

/* Animation and Sprites */
sprite = spr_wall;
attackSprite = spr_wall;
deathSprite = spr_wall;
hitSprite = spr_wall;
walkAnimationSpeed = 0.1;
deathSpriteLength = sprite_get_number(deathSprite) - 0.5;
image_speed = 0.1;

/* Sounds */
walkSound = snd_slime;
deathSound = snd_wolf_death;
attackSound = snd_wolf_attack;
hurtSound = snd_enemy_hit;

/* Mob values */
chaseDistance = 300;
moveSpeed = 0.3;
hp = 1;
currentHp = hp;
customWalk = false;

/* Attack Values */
attackCooldownMax = 60;
attackCooldownCounter = 0;
attackDistance = 8;
attackTime = 20;
attackCounter = attackTime;
attackPause = true;
attackFrame = 0;
attackDamage = 1;
attackProjectile = noone;

/* Hit timer */
baseKnockback = 2;
knockbackCounter = baseKnockback;

/* Death */
deathTime = 20;
deathCounter = deathTime;

/* Boss Stuff */
checkedBossDistance = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

scr_set_enemy_state();

/* Boss fight state */
if(instance_exists(obj_level_generator.boss) &amp;&amp; !checkedBossDistance &amp;&amp; state != states.idle) {
    if((obj_level_generator.boss).inFight == true) {
        checkedBossDistance = true;
        if(distance_to_object(obj_player) &gt; 60) {
            path_end();
            state = states.idle;
        }
    }
}

if(obj_area_controller.area == 3) {
    if(buffed) {
        if(hp &lt; maxHp &amp;&amp; state != states.hit &amp;&amp; state != states.death) hp += 0.4;
        if(executedBuff == false) {
            moveSpeed = initalMoveSpeed * 1.5;
            attackTime = attackTime / 2;
            attackCounter = attackTime;
            executedBuff = true;
        }
    } else if(moveSpeed != initalMoveSpeed) {
        executedBuff = false;
        moveSpeed = initalMoveSpeed;
        attackTime = initalAttackTime;
        attackCounter = attackTime;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if(hp &gt; 0 &amp;&amp; hp != maxHp) {
    draw_set_alpha(1);
    draw_set_color(c_white);
    draw_rectangle(x-10, y - (sprite_height / 1.3), (x + 10), y - (sprite_height / 1.3) + 2, false );
    draw_set_color(hpColor);
    draw_rectangle(x-10, y - (sprite_height / 1.3), (x - 10) + (20 * (hp/maxHp)), y - (sprite_height / 1.3) + 2, false );
}

if(buffed) draw_sprite(spr_buffed, image_index,x,y);
if(playerAggro == false &amp;&amp; (state == states.walk || state == states.attack)) {
    playerAggro = true;
    aggroCounter = 80;
}
if(playerAggro &amp;&amp; aggroCounter &gt; 0) {
    draw_sprite(spr_exclamation,0,x , y - abs(sprite_height / 2));
    aggroCounter--;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
