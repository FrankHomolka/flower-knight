<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_skeleton_spear</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_enemy_projectile_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

hitPlayer = false;
hitWall = false;
hitBoss = false;
despawnTimer = 300;
landingDir = false;
move_towards_point(obj_player.x, obj_player.y, 3);
image_angle = point_direction(x, y, obj_player.x, obj_player.y);
life = 0;
scr_magic_ball_particle();
scr_destructible_particle(spr_crate_particle);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if(distance_to_point(obj_player.x,obj_player.y) &lt; 5 &amp;&amp; landingDir == false) {
    landingDir = point_direction(x,y,obj_player.x,obj_player.y);
}

if(place_meeting(x,y,obj_player_basic_attack)) {
    if(spawnMinion) {
        audio_play_sound_on(myEmitter, snd_destructible, false, 1); 
        part_emitter_region(destructSystem, destructEmitter, x, x,  y, y, ps_shape_ellipse, ps_distr_linear);
        part_emitter_burst(destructSystem, destructEmitter, destructParticle, random_range(5, 8));
        instance_destroy();
    } else {
        if(obj_player.canParry == false) {
            if(!reflected) {
                if(instance_exists(obj_quest_controller)) obj_quest_controller.skeletonSpearsReflected++;
                var rand = random_range(20, 20);
                direction -= (180 + rand);
                image_angle -= (180 + rand);
                reflected = true;
                reflectedCounter = 10;
            }
        }
    }
}

// Can reflect to hit skeleton
if(reflected 
    &amp;&amp; hitPlayer == false 
    &amp;&amp; hitWall == false 
    &amp;&amp; hitBoss = false
    &amp;&amp; place_meeting(x,y,obj_skeleton_general)) {
    hitBoss = true;
    with(obj_skeleton_general) {
        scr_try_hit_enemy(other.attackDamage, self, false, obj_player.knockbackMultiplier);
    }
}

if(place_meeting(x, y, obj_player) 
    &amp;&amp; hitPlayer == false 
    &amp;&amp; hitWall == false
    &amp;&amp; obj_player.state != states.dash) {
    scr_try_hit_player(attackDamage, source);
    audio_play_sound_on(myEmitter, snd_arrow_land, false, 1); 
    hitPlayer = true;
    if(spawnMinion)
        instance_create(x,y,obj_enemy_skeleton);
}

if(place_meeting(x, y, obj_wall) &amp;&amp; !hitWall) {
    speed = 0;
    audio_play_sound_on(myEmitter, snd_arrow_land, false, 1); 
    hitWall = true;
    if(spawnMinion)
        instance_create(x,y,obj_enemy_skeleton);
}

if(hitPlayer &amp;&amp; !hitWall) {
    spawnMinion = false;
    if(place_meeting(x,y,obj_enemy_archer_attack))
        instance_destroy();
    x = obj_player.x - lengthdir_x(6, landingDir);
    y = obj_player.y - lengthdir_y(6, landingDir);
}

if(hitWall) {
    despawnTimer--;
    if(despawnTimer &lt;= 0) {
        instance_destroy();
    }
}

life++;

if(life % 5 == 0 &amp;&amp; spawnMinion) {
    part_type_direction(fireParticle, (point_direction(x, y, obj_player.x, obj_player.y) - 50) - 180, (point_direction(x, y, obj_player.x, obj_player.y) + 50) - 180, 0, 0.2);
    part_emitter_region(fireSystem, fireEmitter, x, x,  y, y, ps_shape_ellipse, ps_distr_linear);
    part_emitter_burst(fireSystem, fireEmitter, fireParticle, random_range(1, 3));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!hitPlayer) {
    scr_draw_entity_shadow(3, 2, 0, 3);
}
draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
