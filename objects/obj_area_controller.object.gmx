<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>level = 0;
area = 1;
currentRoom = room;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(room != currentRoom) {
    
    currentRoom = room;

    // Reset level
    if(room == rm_shop) {
        level = 0;
        area = 1;
    }
    
    // Unlock item
    if(instance_exists(obj_quest_controller)) obj_quest_controller.level = level;
    
    // Increment area
    if(level == 3) {
        level = 0;
        area++;
    }
    
    // Go to win screen
    if(area == 3) {
        show_debug_message("YOU WIN");
        room_goto(rm_win);
    }
    
    // Set level variables
    if(room == rm_procedural) {
        show_debug_message('LEVEL = ' + string(level));
        
        switch(area) {
            case 1:
                with(instance_create(x,y,obj_blank)) {
                    enemyList = ds_list_create();
                    roomList = ds_list_create();
                    maxNumRooms = 8;
                    for(i = 0; i &lt; 5; i++) 
                        ds_list_add(roomList, spr_room_eye_corners);
                    for(i = 0; i &lt; 4; i++) 
                        ds_list_add(roomList, spr_room_group);
                    for(i = 0; i &lt; 2; i++) 
                        ds_list_add(roomList, spr_room_hallway);
                    for(i = 0; i &lt; 2; i++) 
                        ds_list_add(roomList, spr_room_traps_enemies);
                    for(i = 0; i &lt; 2; i++) 
                        ds_list_add(roomList, spr_room_turret_hallway);
                    for(i = 0; i &lt; 2; i++) 
                        ds_list_add(roomList, spr_room_skeletons);
                    ds_list_add(roomList, spr_room_boom_boom);
                    ds_list_add(roomList, spr_room_spike_treasure);
                    ds_list_add(roomList, spr_room_maze);
                    
                    ds_list_add(enemyList, obj_enemy_skeleton, obj_skeleton_bomber, obj_enemy_eye_turret_single);
                    
                    if(other.level &gt;= 1) {
                        ds_list_add(enemyList, obj_enemy_eye_turret_burst);
                        for(i = 0; i &lt; 3; i++) 
                            ds_list_add(roomList, spr_room_burst_challenge);
                        for(i = 0; i &lt; 4; i++) 
                            ds_list_add(roomList, spr_room_burst);
                        for(i = 0; i &lt; 2; i++) 
                            ds_list_add(roomList, spr_room_dodge_challenge);
                        for(i = 0; i &lt; 2; i++) 
                            ds_list_add(roomList, spr_room_all);
                        maxNumRooms = 9;
                    }
                    if(other.level == 2) {
                        ds_list_add(enemyList, obj_enemy_eye_turret);
                        for(i = 0; i &lt; 8; i++) 
                            ds_list_add(roomList, spr_room_homing);
                        for(i = 0; i &lt; 4; i++) 
                            ds_list_add(roomList, spr_room_final_challenge);
                        maxNumRooms = 10;
                    }
                    tileSheet = bck_area_1;
                    if(other.level == 2) {
                        boss = obj_boss_1;
                    } else {
                        boss = obj_skeleton_general;
                    }
                    background_color = $181611;
                    instance_change(obj_level_generator,true);
                }
                break;
            case 2:
                with(instance_create(x,y,obj_blank)) {
                    enemyList = ds_list_create();
                    ds_list_add(enemyList, obj_enemy_slime, obj_enemy_archer, obj_enemy_artillery);
                    roomList = ds_list_create();
                    for(i = 0; i &lt; 3; i++) 
                        ds_list_add(roomList, spr_room_group);
                    for(i = 0; i &lt; 6; i++) 
                        ds_list_add(roomList, spr_room_open)
                    for(i = 0; i &lt; 5; i++) 
                        ds_list_add(roomList, spr_room_traps_enemies)
                    for(i = 0; i &lt; 3; i++) 
                        ds_list_add(roomList, spr_room_group_2)
                    for(i = 0; i &lt; 5; i++) 
                        ds_list_add(roomList, spr_room_pit_ring)
                    for(i = 0; i &lt; 6; i++) 
                        ds_list_add(roomList, spr_room_hallway); 
                    for(i = 0; i &lt; 3; i++) 
                        ds_list_add(roomList, spr_room_eye_corners)
                    ds_list_add(roomList, spr_room_wings);
                    ds_list_add(roomList, spr_room_run);
                    maxNumRooms = 14;
                    
                    if(other.level &gt;= 1) {
                        ds_list_add(enemyList, obj_enemy_grabber);
                        for(i = 0; i &lt; 4; i++) 
                            ds_list_add(roomList, spr_room_burst_challenge);
                        for(i = 0; i &lt; 4; i++) 
                            ds_list_add(roomList, spr_room_burst);
                        for(i = 0; i &lt; 3; i++) 
                            ds_list_add(roomList, spr_room_dodge_challenge);
                        for(i = 0; i &lt; 3; i++) 
                            ds_list_add(roomList, spr_room_all);
                        for(i = 0; i &lt; 8; i++) 
                            ds_list_add(roomList, spr_room_2_1);
                        for(i = 0; i &lt; 8; i++) 
                            ds_list_add(roomList, spr_room_2_2);
                        maxNumRooms = 15;
                    }
                    if(other.level == 2) {
                        ds_list_add(enemyList, obj_enemy_fairy);
                        for(i = 0; i &lt; 4; i++) 
                            ds_list_add(roomList, spr_room_homing);
                        for(i = 0; i &lt; 2; i++) 
                            ds_list_add(roomList, spr_room_final_challenge);
                        for(i = 0; i &lt; 8; i++) 
                            ds_list_add(roomList, spr_room_3_1);
                        for(i = 0; i &lt; 8; i++) 
                            ds_list_add(roomList, spr_room_3_2);
                        maxNumRooms = 16;
                    }
                    
                    tileSheet = bck_area_2;
                    if(other.level == 2) {
                        boss = obj_boss_2;
                    } else {
                        boss = obj_enemy_archer_boss;
                    }
                    background_color = $3a1a2e;
                    instance_change(obj_level_generator,true);
                }
                break;
            case 3:
                with(instance_create(x,y,obj_blank)) { 
                    enemyList = ds_list_create();
                    ds_list_add(enemyList, obj_enemy_slime, obj_enemy_charger, obj_enemy_archer);
                    roomList = ds_list_create();
                    for(i = 0; i &lt; 2; i++) 
                        ds_list_add(roomList, spr_room_open)
                    for(i = 0; i &lt; 4; i++) 
                        ds_list_add(roomList, spr_room_pillars)
                    for(i = 0; i &lt; 4; i++) 
                        ds_list_add(roomList, spr_room_group)
                    for(i = 0; i &lt; 4; i++) 
                        ds_list_add(roomList, spr_room_empty)
                    ds_list_add(roomList, spr_room_maze);
                    ds_list_add(roomList, spr_room_wings);
                    maxNumRooms = 15;
                    tileSheet = bck_area_3;
                    boss = obj_boss_2;
                    background_color = $2e2eb0;
                    instance_change(obj_level_generator,true);
                }
                break;
            default:
                break;
        }
        level++;
    }
    if(!background_showcolour) {
        background_showcolour  = true;
    } 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
