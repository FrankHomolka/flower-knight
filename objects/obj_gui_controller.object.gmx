<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Minimap */
minimapRoomWidth = 24;
minimapRoomHeight = 16;
minimapScale = 2.5;
minimapX = 0;
minimapY = 0;
smallestX = 100;
smallestY = 100;
minimapSprite = false;
findMapStart = false;
enlargeMap = false;
spriteAlpha = 1;

dotRadiusMin = 1;
dotRadius = 1.5;
dotRadiusIncrement = 1/30;
dotRadiusMax = 2;
minimapGrid = ds_list_create();

realFps = floor(fps_real);
fakeFps = floor(fps);

loading = false;
drawingLoadingScreen = false;
drawDebug = false;

initial_gw = 1600;
initial_gh = 900;

currentRoom = room;

hpColor = make_colour_rgb(242, 79, 70);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(obj_player.map) {
    enlargeMap = !enlargeMap;
    if(enlargeMap) {
       minimapScale = 5;
       minimapX = 3;
       minimapY = 1;
    } else {
       minimapScale = 2.5;
       minimapX = 0;
       minimapY = 0;
    }
}

if(room == rm_procedural) {
    if(keyboard_check_pressed(ord('P')) &amp;&amp; global.paused == false) {
        instance_deactivate_object(obj_sound_parent);
        instance_activate_object(obj_player);
        instance_activate_object(obj_dungeon_shop);
        global.paused = true;
    }
    if(keyboard_check_pressed(vk_escape) &amp;&amp; global.paused == true) {
        instance_activate_object(obj_sound_parent); 
        global.paused = false;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Get gui height and width
gw = display_get_gui_width();
gh = display_get_gui_height();
horBlock = gw / 32;
vertBlock = gh / 32;
scaleFactor = (gw / initial_gw);

if(global.paused == false) {
    depth = -10000;
    draw_set_alpha(1);
    
    /* UI */
    if(room != rm_win &amp;&amp; room != rm_game_start &amp;&amp; room != rm_quest) {
        if(instance_exists(obj_fade_controller)) {
            draw_set_alpha(1 - obj_fade_controller.drawAlpha);
            spriteAlpha = 1 - obj_fade_controller.drawAlpha;
        } else {
            draw_set_alpha(1);
            spriteAlpha = 1;
        }
        draw_set_font(fnt_ui);
        draw_set_color(c_white);
        draw_set_halign(fa_left);
        draw_set_valign(fa_middle);
        
        /* Gold gained */
        draw_sprite_ext(spr_gold_gui, 0, horBlock, vertBlock * 5, 3 * scaleFactor, 3 * scaleFactor, 0, c_white, spriteAlpha);
        draw_text_transformed(horBlock * 1.5, vertBlock * 5, '$' + string(obj_quest_controller.gold), 3 * scaleFactor, 3 * scaleFactor, 0);
        
        /* Player hp */
        draw_sprite_ext(spr_hp_gui, 0, (horBlock / 2) , (vertBlock / 2), 5 * scaleFactor, 5 * scaleFactor, 0, c_white, spriteAlpha);
        draw_sprite_part_ext(spr_hp_bar, 0, 0, 0, 49 * (obj_player.hp / obj_player.maxHp), 4, (horBlock / 2) + (2*horBlock), (vertBlock / 2) + (0.7 * vertBlock), 5 * scaleFactor, 5 * scaleFactor, c_white, spriteAlpha);
        if(obj_player.hp &gt; 0) {
            hpText = 'HP ' + string(obj_player.hp) + '/' + string(obj_player.maxHp);
            draw_set_color(c_black);
            draw_text_transformed((1.6 * horBlock) + horBlock - 3, (vertBlock * 2.6) + 3, hpText, 1.8  * scaleFactor, 1.8  * scaleFactor, 0);
            draw_set_color(c_white);
            draw_text_transformed((1.6 * horBlock) + horBlock, (vertBlock * 2.6), hpText, 1.8  * scaleFactor, 1.8  * scaleFactor, 0);
        } else {
            hpText = 'HP 0/' + string(obj_player.maxHp);
            draw_set_color(c_black);
            draw_text_transformed((1.6 * horBlock) + horBlock - 3, (vertBlock * 2.6) + 3, hpText, 1.8  * scaleFactor, 1.8  * scaleFactor, 0);
            draw_set_color(c_white);
            draw_text_transformed((1.6 * horBlock) + horBlock, (vertBlock * 2.6), hpText, 1.8  * scaleFactor, 1.8  * scaleFactor, 0);
        }
        draw_set_font(fnt_1);
    }
    draw_set_alpha(1);
    
    /* Draw minimap background */
    if(loading == false &amp;&amp; room == rm_procedural &amp;&amp; instance_exists(obj_level_generator)) {
        if(instance_exists(obj_dungeon_shop)) {
            if(obj_dungeon_shop.activated == false) scr_draw_minimap();
        } else {
            scr_draw_minimap();
        }
    }
    
    /* Draw button to remind about quests */
    draw_sprite_ext(spr_quest_background, 0, horBlock, gh - (vertBlock * 1.5), 0.4, 0.4, 0, c_white, 1);
    draw_set_color(c_black);
    draw_set_alpha(1);
    draw_set_font(fnt_ui);
    draw_set_valign(fa_bottom);
    draw_set_halign(fa_left);
    draw_text_transformed(horBlock * 1.1, gh - (vertBlock * 1.55), scr_convert_unicode(obj_settings_controller.viewQuests), 3, 3, 0);
    draw_set_color(c_white);
    draw_text_transformed(horBlock * 1.1, gh - (vertBlock * 1.6), scr_convert_unicode(obj_settings_controller.viewQuests), 3, 3, 0);
    
    /* Draw bought items */
    scr_draw_bought_items();
    
    /* Debug Draw */
    if(drawDebug) {
        draw_set_color(c_white);
        if(floor(get_timer()) % 10 == 0) {
            realFps = floor(fps_real);
            fakeFps = floor(fps);
        }
        draw_text_transformed(horBlock * 2, gh - (2 * vertBlock), "area: " + string(obj_area_controller.area), 3, 3, 0);
        draw_text_transformed(horBlock * 2, gh - (4 * vertBlock), "level: " + string(obj_area_controller.level + 1), 3, 3, 0);
        draw_text_transformed(horBlock * 2, gh - (6 * vertBlock), "real fps: " + string(realFps), 3, 3, 0);
        draw_text_transformed(horBlock * 2, gh - (8 * vertBlock), "fps: " + string(fakeFps), 3, 3, 0);
    }
    
    if(obj_player.godMode) {
        draw_set_color(c_white);
        draw_text_transformed(horBlock * 4, gh - (10 * vertBlock), "GODMODE ACTIVE", 3, 3, 0);
    }
    
    /* Draw gameover screen */
    if(obj_player.dead) {
        if(!instance_exists(obj_gameover_controller)) {
            instance_create(x,y,obj_gameover_controller);
        }
    }
    
    /* Draw loading Screen */
    depth = -10000000;
    if(loading) {
        draw_set_alpha(1);
        /* Black background */
        draw_set_color(c_black);
        draw_rectangle(0,0,gw,gh, false);
        draw_set_color(c_white);
        
        /* LOADING text */
        draw_set_halign(fa_right);
        draw_set_valign(fa_bottom);
        draw_set_font(fnt_ui);
        draw_text_transformed(gw - 20, gh - 20, "LOADING...", 3, 3, 0);
        draw_set_valign(fa_top);
        draw_set_halign(fa_left);
        findMapStart = true;
        drawingLoadingScreen = true;
    }
} else {
    draw_set_alpha(1);
    draw_set_color($7b7bc1);
    draw_rectangle(0,0,gw,gh,false);
    
    draw_set_color(c_white);
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    draw_text_transformed((gw / 2) - 6, (gh / 2) - (6 * vertBlock), "PAUSED", 7, 7, 0);
    draw_text_transformed((gw / 2) - 6, (gh / 2), "Press 'Escape' to close", 6, 6, 0);
    draw_set_valign(fa_top);
    draw_set_halign(fa_left);
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
