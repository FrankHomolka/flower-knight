<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
/* Minimap */
minimapRoomWidth = 24;
minimapRoomHeight = 16;
minimapScale = 2;
minimapX = 0;
minimapY = 0;
smallestX = 100;
smallestY = 100;
minimapSprite = false;

dotRadiusMin = 2;
dotRadius = 3;
dotRadiusIncrement = 1/10;
dotRadiusMax = 3;
minimapGrid = ds_list_create();

realFps = floor(fps_real);
fakeFps = floor(fps);

loading = false;
drawingLoadingScreen = false;
drawDebug = false;

initial_gw = 1600;
initial_gh = 900;

currentRoom = room;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Get gui height and width
gw = display_get_gui_width();
gh = display_get_gui_height();
horBlock = gw / 32;
vertBlock = gh / 32;
scaleFactor = (gw / initial_gw);

depth = -10000;
draw_set_alpha(1);

/* UI */
if(room != rm_win &amp;&amp; room != rm_game_start) {
    draw_set_font(fnt_1);
    draw_set_color(c_white);
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    /* Bosses killed */
    draw_sprite_ext(spr_enemies_killed, 0, horBlock, vertBlock * 3, 3 * scaleFactor, 3 * scaleFactor, 0, c_white, 1);
    draw_text_transformed(horBlock * 2, vertBlock * 3, obj_money_controller.money, 3 * scaleFactor, 3 * scaleFactor, 0);
    
    /* Money gained */
    draw_sprite_ext(spr_gold_gui, 0, horBlock * 3, vertBlock * 3, 3 * scaleFactor, 3 * scaleFactor, 0, c_white, 1);
    draw_text_transformed(horBlock * 4, vertBlock * 3, obj_money_controller.coins, 3 * scaleFactor, 3 * scaleFactor, 0);
    
    /* Player hp */
    scr_draw_heart(0, 20, horBlock, vertBlock);
    scr_draw_heart(20, 40, horBlock * 2, vertBlock);
    scr_draw_heart(40, 60, horBlock * 3, vertBlock);
    scr_draw_heart(60, 80, horBlock * 4, vertBlock);
    scr_draw_heart(80, 100, horBlock * 5, vertBlock);
}

/* Draw minimap background */
if(loading == false &amp;&amp; room == rm_procedural) {
    scr_draw_minimap();
}

/* Draw bought items */
scr_draw_bought_items();

/* Debug Draw */
if(drawDebug) {
    draw_set_color(c_white);
    if(floor(get_timer()) % 10 == 0) {
        realFps = floor(fps_real);
        fakeFps = floor(fps);
    }
    draw_text_transformed(horBlock * 2, gh - (2 * vertBlock), "area: " + string(obj_area_controller.area), 3, 3, 0);
    draw_text_transformed(horBlock * 2, gh - (4 * vertBlock), "level: " + string(obj_area_controller.level + 1), 3, 3, 0);
    draw_text_transformed(horBlock * 2, gh - (6 * vertBlock), "real fps: " + string(realFps), 3, 3, 0);
    draw_text_transformed(horBlock * 2, gh - (8 * vertBlock), "fps: " + string(fakeFps), 3, 3, 0);
}

if(obj_player.godMode) {
    draw_set_color(c_white);
    draw_text_transformed(horBlock * 4, gh - (10 * vertBlock), "GODMODE ACTIVE", 3, 3, 0);
}

/* Draw gameover screen */
if(obj_player.dead) {
    if(!instance_exists(obj_gameover_controller)) {
        instance_create(x,y,obj_gameover_controller);
    }
}

/* Draw loading Screen */
depth = -10000000;
if(loading) {
    draw_set_alpha(1);
    /* Black background */
    draw_set_color(c_black);
    draw_rectangle(0,0,gw,gh, false);
    draw_set_color(c_white);
    
    /* LOADING text */
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    draw_text_transformed((gw / 2) - 6, (gh / 2) - 100 - 6, "LOADING...", 7, 7, 0);
    draw_set_valign(fa_top);
    draw_set_halign(fa_left);
    
    drawingLoadingScreen = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
